{"version":3,"file":"static/js/211.8ea56583.chunk.js","mappings":"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","sources":["components/SignupForm/SignupForm.jsx","pages/SingupPage.jsx"],"sourcesContent":["import Avatar from '@mui/material/Avatar';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getIsAuthPending, signupUserThunk } from 'redux/authSlice';\nimport { LoadingButton } from '@mui/lab';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { useState } from 'react';\n\nexport const SignupForm = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const isAuthPending = useSelector(getIsAuthPending);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const validationSchema = yup.object().shape({\n    firstName: yup\n      .string()\n      .min(2, 'Min 2 letter!')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'only letters, apostrophe, dash and spaces'\n      )\n      .required('Required!'),\n    lastName: yup\n      .string()\n      .min(2, 'Min 2 letter!')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'only letters, apostrophe, dash and spaces'\n      )\n      .required('Required!'),\n    email: yup.string().email('Invalid email format!').required('Required!'),\n    password: yup.string().min(7, 'Min 7 letters!').required('Required!'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n    },\n    validationSchema,\n    onSubmit: values => {\n      const { firstName, lastName, email, password } = formik.values;\n      dispatch(\n        signupUserThunk({\n          name: `${firstName.trim()} ${lastName.trim()}`,\n          email: email,\n          password: password,\n        })\n      )\n        .unwrap()\n        .then(() => setErrorMessage(null))\n        .catch(e => {\n          console.log(e);\n          setErrorMessage(e);\n        });\n    },\n  });\n\n  const handleOnClick = event => {\n    event.preventDefault();\n    navigate('/login', { replace: true });\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Box\n          component=\"form\"\n          noValidate\n          onSubmit={formik.handleSubmit}\n          sx={{ mt: 3 }}\n        >\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                id=\"firstName\"\n                name=\"firstName\"\n                type=\"text\"\n                value={formik.values.firstName}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={\n                  formik.touched.firstName && formik.errors.firstName\n                    ? true\n                    : false\n                }\n                helperText={formik.touched.firstName && formik.errors.firstName}\n                title=\"Only letter and -\"\n                required\n                fullWidth\n                label=\"First Name\"\n                autoComplete=\"given-name\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                required\n                fullWidth\n                id=\"lastName\"\n                name=\"lastName\"\n                type=\"text\"\n                value={formik.values.lastName}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={\n                  formik.touched.lastName && formik.errors.lastName\n                    ? true\n                    : false\n                }\n                helperText={formik.touched.lastName && formik.errors.lastName}\n                pattern=\"[a-zA-Z\\-]{2,}\"\n                title=\"Only latin letter and -\"\n                label=\"Last Name\"\n                autoComplete=\"family-name\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                type=\"email\"\n                title=\"email\"\n                fullWidth\n                id=\"email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={\n                  formik.touched.email && formik.errors.email ? true : false\n                }\n                helperText={formik.touched.email && formik.errors.email}\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={\n                  formik.touched.password && formik.errors.password\n                    ? true\n                    : false\n                }\n                helperText={formik.touched.password && formik.errors.password}\n                required\n                fullWidth\n                title=\"minimum 7 symbol \"\n                label=\"Password\"\n                autoComplete=\"new-password\"\n              />\n            </Grid>\n          </Grid>\n          <LoadingButton\n            disabled={!formik.isValid}\n            type=\"submit\"\n            fullWidth\n            loading={isAuthPending}\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n          >\n            Sign Up\n          </LoadingButton>\n          <Grid container justifyContent=\"flex-end\">\n            <Grid item>\n              <Link href=\"#\" variant=\"body2\" onClick={handleOnClick}>\n                Already have an account? Login\n              </Link>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n      {errorMessage && (\n        <Typography mt={2} color={'red'}>\n          {errorMessage}\n        </Typography>\n      )}\n    </Container>\n  );\n};\n","import { SignupForm } from 'components/SignupForm/SignupForm';\n\nconst SignupPage = () => {\n  return <SignupForm />;\n};\n\nexport default SignupPage;\n"],"names":["SignupForm","navigate","useNavigate","dispatch","useDispatch","isAuthPending","useSelector","getIsAuthPending","useState","errorMessage","setErrorMessage","validationSchema","yup","shape","firstName","min","matches","required","lastName","email","password","formik","useFormik","initialValues","onSubmit","values","signupUserThunk","name","trim","unwrap","then","catch","e","console","log","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined","Typography","variant","noValidate","handleSubmit","mt","Grid","container","spacing","item","xs","sm","TextField","id","type","value","onChange","handleChange","onBlur","handleBlur","error","touched","errors","helperText","title","fullWidth","label","autoComplete","pattern","LoadingButton","disabled","isValid","loading","mb","justifyContent","Link","href","onClick","event","preventDefault","replace","color"],"sourceRoot":""}