{"version":3,"file":"static/js/843.b95ed0cf.chunk.js","mappings":"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","sources":["components/AddButton.jsx","components/AddContactForm/AddContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/ContactListPage.jsx"],"sourcesContent":["import { Button } from '@mui/material';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport { createPortal } from 'react-dom';\n\nexport const AddButton = ({ onClick }) => {\n  return createPortal(\n    <Button\n      variant=\"contained\"\n      size=\"large\"\n      startIcon={<AddCircleOutlineIcon />}\n      onClick={onClick}\n      sx={{ position: 'fixed', bottom: '10%', right: '40%' }}\n    >\n      Add contact\n    </Button>,\n    document.querySelector('#modal-root')\n  );\n};\n","import Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { Box } from '@mui/material';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { createPortal } from 'react-dom';\n\nexport default function AddContactForm({\n  onSubmit,\n  onCancel,\n  modalIsOpen,\n  formTitle,\n  itemData,\n}) {\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .min(2, 'Min 2 letter!')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'only letters, apostrophe, dash and spaces'\n      )\n      .required('Required!'),\n    number: yup\n      .string()\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        'Invalid phone number.'\n      )\n      .required('Required!'),\n  });\n  const formik = useFormik({\n    initialValues: {\n      name: itemData?.name || '',\n      number: itemData?.number || '',\n    },\n    validationSchema,\n    onSubmit: values => {\n      onSubmit({ id: itemData?.id, name: values.name, number: values.number });\n    },\n  });\n\n  return createPortal(\n    <div>\n      <Dialog open={modalIsOpen} onClose={onCancel}>\n        <Box component=\"form\" noValidate onSubmit={formik.handleSubmit}>\n          <DialogTitle>{formTitle}</DialogTitle>\n          <DialogContent>\n            <DialogContentText></DialogContentText>\n            <TextField\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              margin=\"dense\"\n              label=\"Name\"\n              fullWidth\n              variant=\"outlined\"\n              value={formik.values.name}\n              // pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              onChange={formik.handleChange}\n              required\n              onBlur={formik.handleBlur}\n              error={formik.touched.name && formik.errors.name ? true : false}\n              helperText={formik.touched.name && formik.errors.name}\n            />\n\n            <TextField\n              id=\"number\"\n              margin=\"dense\"\n              label=\"Phone number\"\n              fullWidth\n              variant=\"outlined\"\n              type=\"tel\"\n              name=\"number\"\n              value={formik.values.number}\n              // pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              onChange={formik.handleChange}\n              required\n              onBlur={formik.handleBlur}\n              error={\n                formik.touched.number && formik.errors.number ? true : false\n              }\n              helperText={formik.touched.number && formik.errors.number}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={onCancel}>Cancel</Button>\n            <Button type=\"submit\">Ok</Button>\n          </DialogActions>\n        </Box>\n      </Dialog>\n    </div>,\n    document.querySelector('#modal-root')\n  );\n}\n","import { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contactSlice/thunk';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport {\n  Box,\n  Card,\n  IconButton,\n  Link,\n  List,\n  ListItem,\n  Typography,\n} from '@mui/material';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport EditIcon from '@mui/icons-material/Edit';\n\nconst ContactList = ({ onEdit }) => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const contactList = useMemo(\n    () =>\n      (filter\n        ? contacts.filter(({ name }) =>\n            name.toLowerCase().includes(filter.toLowerCase())\n          )\n        : contacts\n      ).toSorted((a, b) =>\n        a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1\n      ),\n    [contacts, filter]\n  );\n\n  return (\n    <List>\n      {contactList.map(({ id, name, number }) => (\n        <ListItem key={id}>\n          <Card\n            sx={{\n              display: 'flex',\n              flexWrap: 'nowrap',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              width: '100%',\n            }}\n          >\n            <Box\n              sx={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                flexDirection: { xs: 'column', sm: 'row' },\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                width: '100%',\n              }}\n            >\n              <Typography variant=\"h5\" sx={{ mr: 'auto', ml: 1 }}>\n                {`${name}`}\n              </Typography>\n              <Link\n                href={`tel:${number.replaceAll(/[ \\-.()]/g, '')}`}\n                underline={'none'}\n              >\n                <Typography\n                  variant=\"h5\"\n                  sx={{ mr: 1 }}\n                >{`${number}`}</Typography>\n              </Link>\n            </Box>\n            <Box\n              sx={{\n                display: 'flex',\n                flexWrap: { xs: 'wrap', sm: 'nowrap' },\n                alignItems: 'center',\n              }}\n            >\n              <IconButton\n                size=\"large\"\n                color=\"inherit\"\n                onClick={() => {\n                  onEdit({ id: id, name: name, number: number });\n                }}\n              >\n                <EditIcon fontSize=\"inherit\" />\n              </IconButton>\n\n              <IconButton\n                size=\"large\"\n                color=\"inherit\"\n                onClick={() => {\n                  dispatch(deleteContactThunk(id));\n                }}\n              >\n                <DeleteForeverIcon fontSize=\"inherit\" />\n              </IconButton>\n            </Box>\n          </Card>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/selectors';\n\nimport { setFilter } from 'redux/filterSlice';\nimport { TextField } from '@mui/material';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = evt => {\n    if ((evt.target.name = 'filter')) {\n      dispatch(setFilter(evt.target.value));\n    }\n  };\n  return (\n    <TextField\n      label=\"Find contacts by name\"\n      id=\"standard-search\"\n      type=\"search\"\n      variant=\"standard\"\n      fullWidth\n      sx={{ mt: 3, mb: 3 }}\n      name=\"filter\"\n      value={filter}\n      onChange={handleChange}\n      autoComplete=\"off\"\n    />\n  );\n};\n\nexport default Filter;\n","import { Container } from '@mui/material';\nimport { AddButton } from 'components/AddButton';\nimport AddContactForm from 'components/AddContactForm/AddContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getIsLoggedIn } from 'redux/authSlice';\nimport {\n  addContactThunk,\n  editContactThunk,\n  fetchContactsThunk,\n} from 'redux/contactSlice/thunk';\nimport { getContacts } from 'redux/selectors';\n\nconst ContactListPage = () => {\n  const isLoggedIn = useSelector(getIsLoggedIn);\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [itemEdit, setItemEdit] = useState(null);\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      dispatch(fetchContactsThunk());\n    }\n  }, [dispatch, isLoggedIn]);\n\n  const handleAddClick = () => {\n    setModalIsOpen(true);\n  };\n\n  const handleEditClick = values => {\n    setModalIsOpen(true);\n    setItemEdit(values);\n  };\n\n  const handleCloseModal = () => {\n    setModalIsOpen(false);\n    setItemEdit(null);\n  };\n\n  const handleSubmit = ({ id, name, number }) => {\n    console.log({ id, name, number });\n\n    if (\n      (id ? contacts.filter(({ id: cid }) => id !== cid) : contacts).some(\n        ({ name: cname }) => cname === name\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    if (!id) {\n      dispatch(addContactThunk({ name: name, number: number }));\n    } else {\n      if (\n        !contacts.some(\n          ({ id: cid, name: cname, number: cnumber }) =>\n            id === cid && name === cname && number === cnumber\n        )\n      ) {\n        dispatch(editContactThunk({ id: id, name: name, number: number }));\n      }\n    }\n    setModalIsOpen(false);\n    setItemEdit(null);\n  };\n\n  return (\n    <Container component={'main'}>\n      {modalIsOpen && (\n        <AddContactForm\n          modalIsOpen\n          formTitle={itemEdit ? 'Edit contact' : 'Add contact'}\n          onCancel={handleCloseModal}\n          onSubmit={handleSubmit}\n          itemData={itemEdit}\n        />\n      )}\n      <Filter />\n      <ContactList onEdit={handleEditClick} />\n      <AddButton onClick={handleAddClick} />\n    </Container>\n  );\n};\n\nexport default ContactListPage;\n"],"names":["AddButton","onClick","createPortal","Button","variant","size","startIcon","AddCircleOutline","sx","position","bottom","right","document","querySelector","AddContactForm","onSubmit","onCancel","modalIsOpen","formTitle","itemData","validationSchema","yup","shape","name","min","matches","required","number","formik","useFormik","initialValues","values","id","Dialog","open","onClose","Box","component","noValidate","handleSubmit","DialogTitle","DialogContent","DialogContentText","TextField","type","margin","label","fullWidth","value","title","onChange","handleChange","onBlur","handleBlur","error","touched","errors","helperText","DialogActions","onEdit","contacts","useSelector","getContacts","filter","getFilter","dispatch","useDispatch","contactList","useMemo","toLowerCase","includes","toSorted","a","b","List","map","ListItem","Card","display","flexWrap","justifyContent","alignItems","width","flexDirection","xs","sm","Typography","mr","ml","Link","href","replaceAll","underline","IconButton","color","Edit","fontSize","deleteContactThunk","DeleteForever","mt","mb","evt","target","setFilter","autoComplete","isLoggedIn","getIsLoggedIn","useState","setModalIsOpen","itemEdit","setItemEdit","useEffect","fetchContactsThunk","Container","console","log","cid","some","alert","cname","cnumber","editContactThunk","addContactThunk"],"sourceRoot":""}