{"version":3,"file":"static/js/931.0cba9353.chunk.js","mappings":"4WAiBaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAgBC,EAAAA,EAAAA,IAAYC,EAAAA,IAClC,GAAwCC,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAAaE,MAAM,yBAAyBC,SAAS,aAC5DC,SAAUJ,EAAAA,KAAaK,IAAI,EAAG,kBAAkBF,SAAS,eAGrDG,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbN,MAAO,GACPE,SAAU,IAEZL,iBAAAA,EACAU,SAAU,SAAAC,GACRZ,EAAgB,MAChBP,GAASoB,EAAAA,EAAAA,IAAeD,IACrBE,SACAC,MAAK,kBAAMf,EAAgB,KAAtB,IACLgB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZjB,EAAgBiB,EACjB,GACJ,IAQH,OACE,UAACG,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,WACE,SAACC,EAAA,GAAD,KACA,UAACC,EAAA,EAAD,CACEC,GAAI,CACFC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UALhB,WAQE,SAACC,EAAA,EAAD,CAAQL,GAAI,CAAEM,EAAG,EAAGC,QAAS,kBAA7B,UACE,SAACC,EAAA,EAAD,OAEF,SAACC,EAAA,EAAD,CAAYb,UAAU,KAAKc,QAAQ,KAAnC,SAAwC,WAGxC,UAACX,EAAA,EAAD,CACEH,UAAU,OACVe,YAAU,EACVzB,SAAUH,EAAO6B,aACjBZ,GAAI,CAAEa,GAAI,GAJZ,WAME,SAACC,EAAA,EAAD,CACEC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,MAAOnC,EAAOI,OAAOR,MACrBwC,SAAUpC,EAAOqC,aACjBC,OAAQtC,EAAOuC,WACfC,SAAOxC,EAAOyC,QAAQ7C,QAASI,EAAO0C,OAAO9C,OAC7C+C,WAAY3C,EAAOyC,QAAQ7C,OAASI,EAAO0C,OAAO9C,MAClDgD,OAAO,SACP/C,UAAQ,EACRgD,MAAM,QACNC,WAAS,EACTC,MAAM,gBACNC,aAAa,WAEf,SAACjB,EAAA,EAAD,CACEC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLU,OAAO,SACPT,MAAOnC,EAAOI,OAAON,SACrBsC,SAAUpC,EAAOqC,aACjBC,OAAQtC,EAAOuC,WACfC,SACExC,EAAOyC,QAAQ3C,WAAYE,EAAO0C,OAAO5C,UAE3C6C,WAAY3C,EAAOyC,QAAQ3C,UAAYE,EAAO0C,OAAO5C,SACrDgD,WAAS,EACTC,MAAM,WACNlD,UAAQ,EACRmD,aAAa,sBAGf,SAACC,EAAA,EAAD,CACEf,KAAK,SACLgB,QAAS/D,EACT2D,WAAS,EACTnB,QAAQ,YACRV,GAAI,CAAEa,GAAI,EAAGqB,GAAI,GALnB,SAMC,aAGD,UAACC,EAAA,GAAD,CAAMC,WAAS,EAAf,WACE,SAACD,EAAA,GAAD,CAAME,MAAI,EAACC,IAAE,KACb,SAACH,EAAA,GAAD,CAAME,MAAI,EAAV,UACE,SAACE,EAAA,EAAD,CAAMC,KAAK,IAAI9B,QAAQ,QAAQ+B,QA1ErB,SAAAC,GACpBA,EAAMC,iBACN7E,EAAS,UAAW,CAAE8E,SAAS,GAChC,EAuEW,SACG,8CAMVtE,IACC,SAACmC,EAAA,EAAD,CAAYI,GAAI,EAAGgC,MAAO,MAA1B,SACGvE,MAKV,EChID,EAJkB,WAChB,OAAO,SAACT,EAAD,GACR,C","sources":["components/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import Avatar from '@mui/material/Avatar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getIsAuthPending, loginUserThunk } from 'redux/authSlice';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { useState } from 'react';\n\nexport const LoginForm = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const isAuthPending = useSelector(getIsAuthPending);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const validationSchema = yup.object().shape({\n    email: yup.string().email('Invalid email format!').required('Required!'),\n    password: yup.string().min(7, 'Min 7 letters!').required('Required!'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema,\n    onSubmit: values => {\n      setErrorMessage(null);\n      dispatch(loginUserThunk(values))\n        .unwrap()\n        .then(() => setErrorMessage(null))\n        .catch(e => {\n          console.log(e);\n          setErrorMessage(e);\n        });\n    },\n  });\n\n  const handleOnClick = event => {\n    event.preventDefault();\n    navigate('/signup', { replace: true });\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Login\n        </Typography>\n        <Box\n          component=\"form\"\n          noValidate\n          onSubmit={formik.handleSubmit}\n          sx={{ mt: 1 }}\n        >\n          <TextField\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            value={formik.values.email}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            error={formik.touched.email && formik.errors.email ? true : false}\n            helperText={formik.touched.email && formik.errors.email}\n            margin=\"normal\"\n            required\n            title=\"email\"\n            fullWidth\n            label=\"Email Address\"\n            autoComplete=\"email\"\n          />\n          <TextField\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            margin=\"normal\"\n            value={formik.values.password}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            error={\n              formik.touched.password && formik.errors.password ? true : false\n            }\n            helperText={formik.touched.password && formik.errors.password}\n            fullWidth\n            label=\"Password\"\n            required\n            autoComplete=\"current-password\"\n          />\n\n          <LoadingButton\n            type=\"submit\"\n            loading={isAuthPending}\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n          >\n            Sign In\n          </LoadingButton>\n          <Grid container>\n            <Grid item xs></Grid>\n            <Grid item>\n              <Link href=\"#\" variant=\"body2\" onClick={handleOnClick}>\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n      {errorMessage && (\n        <Typography mt={2} color={'red'}>\n          {errorMessage}\n        </Typography>\n      )}\n    </Container>\n  );\n};\n","import { LoginForm } from 'components/LoginForm';\n\nconst LoginPage = () => {\n  return <LoginForm />;\n};\n\nexport default LoginPage;\n"],"names":["LoginForm","navigate","useNavigate","dispatch","useDispatch","isAuthPending","useSelector","getIsAuthPending","useState","errorMessage","setErrorMessage","validationSchema","yup","shape","email","required","password","min","formik","useFormik","initialValues","onSubmit","values","loginUserThunk","unwrap","then","catch","e","console","log","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined","Typography","variant","noValidate","handleSubmit","mt","TextField","id","name","type","value","onChange","handleChange","onBlur","handleBlur","error","touched","errors","helperText","margin","title","fullWidth","label","autoComplete","LoadingButton","loading","mb","Grid","container","item","xs","Link","href","onClick","event","preventDefault","replace","color"],"sourceRoot":""}